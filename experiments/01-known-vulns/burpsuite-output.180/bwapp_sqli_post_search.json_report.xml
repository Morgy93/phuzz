<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*, staticAnalysis*, dynamicAnalysis*, prototypePollution*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT vulnerabilityClassifications (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT sender (#PCDATA)>
<!ELEMENT message (#PCDATA)>
<!ELEMENT conversation (#PCDATA)>
<!ELEMENT recipient (#PCDATA)>
<!ELEMENT recipients (recipient*)>
<!ELEMENT smtp (sender, recipients, message, conversation)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
<!ELEMENT parameterName (#PCDATA)>
<!ELEMENT platform (#PCDATA)>
<!ELEMENT signature (#PCDATA)>
<!ELEMENT stackTrace (#PCDATA)>
<!ELEMENT parameterValue (#PCDATA)>
<!ELEMENT dynamicAnalysis (source, sink, sourceStackTrace, sinkStackTrace, eventListenerStackTrace, sourceValue, sinkValue, eventHandlerData, eventHandlerDataType, eventHandlerManipulatedData, poc, origin, isOriginChecked, sourceElementId, sourceElementName, eventFiredEventName, eventFiredElementId, eventFiredElementName, eventFiredOuterHtml)>
<!ELEMENT prototypePollution (poc, pollutionTechnique, pollutionType)>
<!ELEMENT staticAnalysis (source, sink, codeSnippets)>
<!ELEMENT source (#PCDATA)>
<!ELEMENT sink (#PCDATA)>
<!ELEMENT sourceStackTrace (#PCDATA)>
<!ELEMENT sinkStackTrace (#PCDATA)>
<!ELEMENT eventListenerStackTrace (#PCDATA)>
<!ELEMENT sourceValue (#PCDATA)>
<!ELEMENT sinkValue (#PCDATA)>
<!ELEMENT eventHandlerData (#PCDATA)>
<!ELEMENT eventHandlerDataType (#PCDATA)>
<!ELEMENT sourceElementId (#PCDATA)>
<!ELEMENT sourceElementName (#PCDATA)>
<!ELEMENT eventFiredEventName (#PCDATA)>
<!ELEMENT eventFiredElementId (#PCDATA)>
<!ELEMENT eventFiredElementName (#PCDATA)>
<!ELEMENT eventFiredOuterHtml (#PCDATA)>
<!ELEMENT eventHandlerManipulatedData (#PCDATA)>
<!ELEMENT poc (#PCDATA)>
<!ELEMENT origin (#PCDATA)>
<!ELEMENT isOriginChecked (#PCDATA)>
<!ELEMENT codeSnippets (codeSnippet*)>
<!ELEMENT codeSnippet (#PCDATA)>
<!ELEMENT pollutionTechnique (#PCDATA)>
<!ELEMENT pollutionType (#PCDATA)>
]>
<issues burpVersion="2023.8.1" exportTime="Mon Mar 18 09:13:44 GMT 2024">
  <issue>
    <serialNumber>1648885360498332672</serialNumber>
    <type>134217728</type>
    <name><![CDATA[Private IP addresses disclosed]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/sqli_6.php]]></path>
    <location><![CDATA[/sqli_6.php]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>RFC 1918 specifies ranges of IP addresses that are reserved for use in private networks and cannot be routed on the public Internet. Although various methods exist by which an attacker can determine the public IP addresses in use by an organization, the private addresses used internally cannot usually be determined in the same ways.</p>
<p>Discovering the private addresses used within an organization can help an attacker in carrying out network-layer attacks aiming to penetrate the organization's internal infrastructure. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>There is not usually any good reason to disclose the internal IP addresses used within an organization's infrastructure. If these are being returned in service banners or debug messages, then the relevant services should be configured to mask the private addresses. If they are being used to track back-end servers for load balancing purposes, then the addresses should be rewritten with innocuous identifiers from which an attacker cannot infer any useful information about the infrastructure.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The following RFC 1918 IP address was disclosed in the response:<ul><li>172.22.0.3</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[172.22.0.3]]></issueDetailItem>
    </issueDetailItems>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvc3FsaV82LnBocCBIVFRQLzEuMA0KSG9zdDogd2ViDQpDb29raWU6IHNlY3VyaXR5X2xldmVsPTANCkNvbnRlbnQtTGVuZ3RoOiAyNA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCg0KdGl0bGU9ZnV6eiZhY3Rpb249c2VhcmNo]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpEYXRlOiBNb24sIDE4IE1hciAyMDI0IDA5OjEwOjQzIEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjU3IChEZWJpYW4pDQpDb250ZW50LUxlbmd0aDogMzAyDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9aXNvLTg4NTktMQ0KDQo8IURPQ1RZUEUgSFRNTCBQVUJMSUMgIi0vL0lFVEYvL0RURCBIVE1MIDIuMC8vRU4iPgo8aHRtbD48aGVhZD4KPHRpdGxlPjQwMCBCYWQgUmVxdWVzdDwvdGl0bGU+CjwvaGVhZD48Ym9keT4KPGgxPkJhZCBSZXF1ZXN0PC9oMT4KPHA+WW91ciBicm93c2VyIHNlbnQgYSByZXF1ZXN0IHRoYXQgdGhpcyBzZXJ2ZXIgY291bGQgbm90IHVuZGVyc3RhbmQuPGJyIC8+CjwvcD4KPGhyPgo8YWRkcmVzcz5BcGFjaGUvMi40LjU3IChEZWJpYW4pIFNlcnZlciBhdCAxNzIuMjIuMC4zIFBvcnQgODA8L2FkZHJlc3M+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8427181295388349440</serialNumber>
    <type>134217728</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/sqli_6.php]]></path>
    <location><![CDATA[/sqli_6.php]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <issueDetail><![CDATA[The <b>title</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the title parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the title parameter. The application took <b>20012</b> milliseconds to respond to the request, compared with <b>1</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvc3FsaV82LnBocCBIVFRQLzEuMA0KSG9zdDogd2ViDQpDb29raWU6IHNlY3VyaXR5X2xldmVsPTANCkNvbnRlbnQtTGVuZ3RoOiAyNA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCg0KdGl0bGU9ZnV6eicmYWN0aW9uPXNlYXJjaA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBNb24sIDE4IE1hciAyMDI0IDA5OjEwOjQ0IEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjU3IChEZWJpYW4pDQpYLVBvd2VyZWQtQnk6IFBIUC84LjIuMTANClNldC1Db29raWU6IFBIUFNFU1NJRD1iZTllNnY5ZGEwcjc3cjFrdjI2MGFsN2toMTsgcGF0aD0vDQpFeHBpcmVzOiBUaHUsIDE5IE5vdiAxOTgxIDA4OjUyOjAwIEdNVA0KQ2FjaGUtQ29udHJvbDogbm8tc3RvcmUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUNClByYWdtYTogbm8tY2FjaGUNClNldC1Db29raWU6IFBIUFNFU1NJRD1kcHEyczBkODI5bXRiN2lndXVibjM3a3JidjsgcGF0aD0vDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtTGVuZ3RoOiAyMzEwDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgNCg0KCjwhRE9DVFlQRSBodG1sPgo8aHRtbD4KCjxoZWFkPgoKPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiPgoKPCEtLTxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BcmNoaXRlY3RzK0RhdWdodGVyIj4tLT4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0ic3R5bGVzaGVldHMvc3R5bGVzaGVldC5jc3MiIG1lZGlhPSJzY3JlZW4iIC8+CjxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iaW1hZ2VzL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIC8+Cgo8IS0tPHNjcmlwdCBzcmM9Ii8vaHRtbDVzaGl2Lmdvb2dsZWNvZGUuY29tL3N2bi90cnVuay9odG1sNS5qcyI+PC9zY3JpcHQ+LS0+CjxzY3JpcHQgc3JjPSJqcy9odG1sNS5qcyI+PC9zY3JpcHQ+Cgo8dGl0bGU+YldBUFAgLSBTUUwgSW5qZWN0aW9uPC90aXRsZT4KCjwvaGVhZD4KCjxib2R5PgoKPGhlYWRlcj4KCjxoMT5iV0FQUDwvaDE+Cgo8aDI+YW4gZXh0cmVtZWx5IGJ1Z2d5IHdlYiBhcHAgITwvaDI+Cgo8L2hlYWRlcj4KCjxkaXYgaWQ9Im1lbnUiPgoKICAgIDx0YWJsZT4KCiAgICAgICAgPHRyPgoKICAgICAgICAgICAgPHRkPjxhIGhyZWY9InBvcnRhbC5waHAiPkJ1Z3M8L2E+PC90ZD4KICAgICAgICAgICAgPHRkPjxhIGhyZWY9InBhc3N3b3JkX2NoYW5nZS5waHAiPkNoYW5nZSBQYXNzd29yZDwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0idXNlcl9leHRyYS5waHAiPkNyZWF0ZSBVc2VyPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSJzZWN1cml0eV9sZXZlbF9zZXQucGhwIj5TZXQgU2VjdXJpdHkgTGV2ZWw8L2E+PC90ZD4KICAgICAgICAgICAgPHRkPjxhIGhyZWY9InJlc2V0LnBocCIgb25jbGljaz0icmV0dXJuIGNvbmZpcm0oJ0FsbCBzZXR0aW5ncyB3aWxsIGJlIGNsZWFyZWQuIEFyZSB5b3Ugc3VyZT8nKTsiPlJlc2V0PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSJjcmVkaXRzLnBocCI+Q3JlZGl0czwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0iaHR0cDovL2l0c2VjZ2FtZXMuYmxvZ3Nwb3QuY29tIiB0YXJnZXQ9Il9ibGFuayI+QmxvZzwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0ibG9nb3V0LnBocCIgb25jbGljaz0icmV0dXJuIGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZT8nKTsiPkxvZ291dDwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGZvbnQgY29sb3I9InJlZCI+V2VsY29tZSBBZG1pbjwvZm9udD48L3RkPgoKICAgICAgICA8L3RyPgoKICAgIDwvdGFibGU+Cgo8L2Rpdj4KCjxkaXYgaWQ9Im1haW4iPgoKICAgIDxoMT5TUUwgSW5qZWN0aW9uIChQT1NUL1NlYXJjaCk8L2gxPgoKICAgIDxmb3JtIGFjdGlvbj0iL3NxbGlfNi5waHAiIG1ldGhvZD0iUE9TVCI+CgogICAgICAgIDxwPgoKICAgICAgICA8bGFiZWwgZm9yPSJ0aXRsZSI+U2VhcmNoIGZvciBhIG1vdmllOjwvbGFiZWw+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ0aXRsZSIgbmFtZT0idGl0bGUiIHNpemU9IjI1Ij4KCiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9ImFjdGlvbiIgdmFsdWU9InNlYXJjaCI+U2VhcmNoPC9idXR0b24+CgogICAgICAgIDwvcD4KCiAgICA8L2Zvcm0+CgogICAgPHRhYmxlIGlkPSJ0YWJsZV95ZWxsb3ciPgoKICAgICAgICA8dHIgaGVpZ2h0PSIzMCIgYmdjb2xvcj0iI2ZmYjcxNyIgYWxpZ249ImNlbnRlciI+CgogICAgICAgICAgICA8dGQgd2lkdGg9IjIwMCI+PGI+VGl0bGU8L2I+PC90ZD4KICAgICAgICAgICAgPHRkIHdpZHRoPSI4MCI+PGI+UmVsZWFzZTwvYj48L3RkPgogICAgICAgICAgICA8dGQgd2lkdGg9IjE0MCI+PGI+Q2hhcmFjdGVyPC9iPjwvdGQ+CiAgICAgICAgICAgIDx0ZCB3aWR0aD0iODAiPjxiPkdlbnJlPC9iPjwvdGQ+CiAgICAgICAgICAgIDx0ZCB3aWR0aD0iODAiPjxiPklNRGI8L2I+PC90ZD4KCiAgICAgICAgPC90cj4KCiAgICAgICAgPHRyIGhlaWdodD0iNTAiPgoKICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiIHdpZHRoPSI1ODAiPkVycm9yOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICclJycgYXQgbGluZSAx]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvc3FsaV82LnBocCBIVFRQLzEuMA0KSG9zdDogd2ViDQpDb29raWU6IHNlY3VyaXR5X2xldmVsPTANCkNvbnRlbnQtTGVuZ3RoOiAyNA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCg0KdGl0bGU9ZnV6eicnJmFjdGlvbj1zZWFyY2g=]]></request>
      <response base64="true"><![CDATA[]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvc3FsaV82LnBocCBIVFRQLzEuMA0KSG9zdDogd2ViDQpDb29raWU6IHNlY3VyaXR5X2xldmVsPTANCkNvbnRlbnQtTGVuZ3RoOiAyNA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCg0KdGl0bGU9ZnV6eiclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCZhY3Rpb249c2VhcmNo]]></request>
      <response base64="true"><![CDATA[]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4000299761358082048</serialNumber>
    <type>134217728</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/sqli_6.php]]></path>
    <location><![CDATA[/sqli_6.php]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <issueDetail><![CDATA[The value of the <b>title</b> request parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvc3FsaV82LnBocCBIVFRQLzEuMA0KSG9zdDogd2ViDQpDb29raWU6IHNlY3VyaXR5X2xldmVsPTANCkNvbnRlbnQtTGVuZ3RoOiAyNA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCg0KdGl0bGU9JyUyMiUzZSUzY3N2ZyUyZm9ubG9hZCUzZGZldGNoJTYwJTJmJTJmNTAzZnZtdmlrdzBhN2U4MTdseWM1d25xMWg3YXYwanM5ZzEzcnJnJTVjLm9hc3RpZnkuY29tJTYwJTNlJmFjdGlvbj1zZWFyY2g=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBNb24sIDE4IE1hciAyMDI0IDA5OjEyOjExIEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjU3IChEZWJpYW4pDQpYLVBvd2VyZWQtQnk6IFBIUC84LjIuMTANClNldC1Db29raWU6IFBIUFNFU1NJRD1uNWc5cmFkNmNjNXBpMGdhaWxjcnNoM3M0bzsgcGF0aD0vDQpFeHBpcmVzOiBUaHUsIDE5IE5vdiAxOTgxIDA4OjUyOjAwIEdNVA0KQ2FjaGUtQ29udHJvbDogbm8tc3RvcmUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUNClByYWdtYTogbm8tY2FjaGUNClNldC1Db29raWU6IFBIUFNFU1NJRD0zMjY4djFoNmdtdXI0ZmozaXVwZG9zdTQ1NDsgcGF0aD0vDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtTGVuZ3RoOiAyMzg2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgNCg0KCjwhRE9DVFlQRSBodG1sPgo8aHRtbD4KCjxoZWFkPgoKPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiPgoKPCEtLTxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BcmNoaXRlY3RzK0RhdWdodGVyIj4tLT4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0ic3R5bGVzaGVldHMvc3R5bGVzaGVldC5jc3MiIG1lZGlhPSJzY3JlZW4iIC8+CjxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iaW1hZ2VzL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIC8+Cgo8IS0tPHNjcmlwdCBzcmM9Ii8vaHRtbDVzaGl2Lmdvb2dsZWNvZGUuY29tL3N2bi90cnVuay9odG1sNS5qcyI+PC9zY3JpcHQ+LS0+CjxzY3JpcHQgc3JjPSJqcy9odG1sNS5qcyI+PC9zY3JpcHQ+Cgo8dGl0bGU+YldBUFAgLSBTUUwgSW5qZWN0aW9uPC90aXRsZT4KCjwvaGVhZD4KCjxib2R5PgoKPGhlYWRlcj4KCjxoMT5iV0FQUDwvaDE+Cgo8aDI+YW4gZXh0cmVtZWx5IGJ1Z2d5IHdlYiBhcHAgITwvaDI+Cgo8L2hlYWRlcj4KCjxkaXYgaWQ9Im1lbnUiPgoKICAgIDx0YWJsZT4KCiAgICAgICAgPHRyPgoKICAgICAgICAgICAgPHRkPjxhIGhyZWY9InBvcnRhbC5waHAiPkJ1Z3M8L2E+PC90ZD4KICAgICAgICAgICAgPHRkPjxhIGhyZWY9InBhc3N3b3JkX2NoYW5nZS5waHAiPkNoYW5nZSBQYXNzd29yZDwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0idXNlcl9leHRyYS5waHAiPkNyZWF0ZSBVc2VyPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSJzZWN1cml0eV9sZXZlbF9zZXQucGhwIj5TZXQgU2VjdXJpdHkgTGV2ZWw8L2E+PC90ZD4KICAgICAgICAgICAgPHRkPjxhIGhyZWY9InJlc2V0LnBocCIgb25jbGljaz0icmV0dXJuIGNvbmZpcm0oJ0FsbCBzZXR0aW5ncyB3aWxsIGJlIGNsZWFyZWQuIEFyZSB5b3Ugc3VyZT8nKTsiPlJlc2V0PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSJjcmVkaXRzLnBocCI+Q3JlZGl0czwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0iaHR0cDovL2l0c2VjZ2FtZXMuYmxvZ3Nwb3QuY29tIiB0YXJnZXQ9Il9ibGFuayI+QmxvZzwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0ibG9nb3V0LnBocCIgb25jbGljaz0icmV0dXJuIGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZT8nKTsiPkxvZ291dDwvYT48L3RkPgogICAgICAgICAgICA8dGQ+PGZvbnQgY29sb3I9InJlZCI+V2VsY29tZSBBZG1pbjwvZm9udD48L3RkPgoKICAgICAgICA8L3RyPgoKICAgIDwvdGFibGU+Cgo8L2Rpdj4KCjxkaXYgaWQ9Im1haW4iPgoKICAgIDxoMT5TUUwgSW5qZWN0aW9uIChQT1NUL1NlYXJjaCk8L2gxPgoKICAgIDxmb3JtIGFjdGlvbj0iL3NxbGlfNi5waHAiIG1ldGhvZD0iUE9TVCI+CgogICAgICAgIDxwPgoKICAgICAgICA8bGFiZWwgZm9yPSJ0aXRsZSI+U2VhcmNoIGZvciBhIG1vdmllOjwvbGFiZWw+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ0aXRsZSIgbmFtZT0idGl0bGUiIHNpemU9IjI1Ij4KCiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9ImFjdGlvbiIgdmFsdWU9InNlYXJjaCI+U2VhcmNoPC9idXR0b24+CgogICAgICAgIDwvcD4KCiAgICA8L2Zvcm0+CgogICAgPHRhYmxlIGlkPSJ0YWJsZV95ZWxsb3ciPgoKICAgICAgICA8dHIgaGVpZ2h0PSIzMCIgYmdjb2xvcj0iI2ZmYjcxNyIgYWxpZ249ImNlbnRlciI+CgogICAgICAgICAgICA8dGQgd2lkdGg9IjIwMCI+PGI+VGl0bGU8L2I+PC90ZD4KICAgICAgICAgICAgPHRkIHdpZHRoPSI4MCI+PGI+UmVsZWFzZTwvYj48L3RkPgogICAgICAgICAgICA8dGQgd2lkdGg9IjE0MCI+PGI+Q2hhcmFjdGVyPC9iPjwvdGQ+CiAgICAgICAgICAgIDx0ZCB3aWR0aD0iODAiPjxiPkdlbnJlPC9iPjwvdGQ+CiAgICAgICAgICAgIDx0ZCB3aWR0aD0iODAiPjxiPklNRGI8L2I+PC90ZD4KCiAgICAgICAgPC90cj4KCiAgICAgICAgPHRyIGhlaWdodD0iNTAiPgoKICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiIHdpZHRoPSI1ODAiPkVycm9yOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICciPjxzdmcvb25sb2FkPWZldGNoYC8vNTAzZnZtdmlrdzBhN2U4MTdseWM1d25xMWg3YXYwanM5ZzEzcnJnXC5vYXN0aWZ5LmNvbWA+JScnIGF0IGxpbmUgMQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
</issues>
