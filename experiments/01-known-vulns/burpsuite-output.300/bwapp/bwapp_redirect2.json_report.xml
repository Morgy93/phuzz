<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*, staticAnalysis*, dynamicAnalysis*, prototypePollution*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT vulnerabilityClassifications (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT sender (#PCDATA)>
<!ELEMENT message (#PCDATA)>
<!ELEMENT conversation (#PCDATA)>
<!ELEMENT recipient (#PCDATA)>
<!ELEMENT recipients (recipient*)>
<!ELEMENT smtp (sender, recipients, message, conversation)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
<!ELEMENT parameterName (#PCDATA)>
<!ELEMENT platform (#PCDATA)>
<!ELEMENT signature (#PCDATA)>
<!ELEMENT stackTrace (#PCDATA)>
<!ELEMENT parameterValue (#PCDATA)>
<!ELEMENT dynamicAnalysis (source, sink, sourceStackTrace, sinkStackTrace, eventListenerStackTrace, sourceValue, sinkValue, eventHandlerData, eventHandlerDataType, eventHandlerManipulatedData, poc, origin, isOriginChecked, sourceElementId, sourceElementName, eventFiredEventName, eventFiredElementId, eventFiredElementName, eventFiredOuterHtml)>
<!ELEMENT prototypePollution (poc, pollutionTechnique, pollutionType)>
<!ELEMENT staticAnalysis (source, sink, codeSnippets)>
<!ELEMENT source (#PCDATA)>
<!ELEMENT sink (#PCDATA)>
<!ELEMENT sourceStackTrace (#PCDATA)>
<!ELEMENT sinkStackTrace (#PCDATA)>
<!ELEMENT eventListenerStackTrace (#PCDATA)>
<!ELEMENT sourceValue (#PCDATA)>
<!ELEMENT sinkValue (#PCDATA)>
<!ELEMENT eventHandlerData (#PCDATA)>
<!ELEMENT eventHandlerDataType (#PCDATA)>
<!ELEMENT sourceElementId (#PCDATA)>
<!ELEMENT sourceElementName (#PCDATA)>
<!ELEMENT eventFiredEventName (#PCDATA)>
<!ELEMENT eventFiredElementId (#PCDATA)>
<!ELEMENT eventFiredElementName (#PCDATA)>
<!ELEMENT eventFiredOuterHtml (#PCDATA)>
<!ELEMENT eventHandlerManipulatedData (#PCDATA)>
<!ELEMENT poc (#PCDATA)>
<!ELEMENT origin (#PCDATA)>
<!ELEMENT isOriginChecked (#PCDATA)>
<!ELEMENT codeSnippets (codeSnippet*)>
<!ELEMENT codeSnippet (#PCDATA)>
<!ELEMENT pollutionTechnique (#PCDATA)>
<!ELEMENT pollutionType (#PCDATA)>
]>
<issues burpVersion="2023.8.1" exportTime="Thu Mar 21 11:58:49 GMT 2024">
  <issue>
    <serialNumber>8877639197214402560</serialNumber>
    <type>134217728</type>
    <name><![CDATA[Private IP addresses disclosed]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/unvalidated_redir_fwd_2.php]]></path>
    <location><![CDATA[/unvalidated_redir_fwd_2.php]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>RFC 1918 specifies ranges of IP addresses that are reserved for use in private networks and cannot be routed on the public Internet. Although various methods exist by which an attacker can determine the public IP addresses in use by an organization, the private addresses used internally cannot usually be determined in the same ways.</p>
<p>Discovering the private addresses used within an organization can help an attacker in carrying out network-layer attacks aiming to penetrate the organization's internal infrastructure. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>There is not usually any good reason to disclose the internal IP addresses used within an organization's infrastructure. If these are being returned in service banners or debug messages, then the relevant services should be configured to mask the private addresses. If they are being used to track back-end servers for load balancing purposes, then the addresses should be rewritten with innocuous identifiers from which an attacker cannot infer any useful information about the infrastructure.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The following RFC 1918 IP address was disclosed in the response:<ul><li>172.22.0.3</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[172.22.0.3]]></issueDetailItem>
    </issueDetailItems>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC91bnZhbGlkYXRlZF9yZWRpcl9md2RfMi5waHA/UmV0dXJuVXJsPWZ1enogSFRUUC8xLjANCkhvc3Q6IHdlYg0KQ29va2llOiBzZWN1cml0eV9sZXZlbD0wDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpEYXRlOiBUaHUsIDIxIE1hciAyMDI0IDExOjUzOjQ4IEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjU3IChEZWJpYW4pDQpDb250ZW50LUxlbmd0aDogMzAyDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9aXNvLTg4NTktMQ0KDQo8IURPQ1RZUEUgSFRNTCBQVUJMSUMgIi0vL0lFVEYvL0RURCBIVE1MIDIuMC8vRU4iPgo8aHRtbD48aGVhZD4KPHRpdGxlPjQwMCBCYWQgUmVxdWVzdDwvdGl0bGU+CjwvaGVhZD48Ym9keT4KPGgxPkJhZCBSZXF1ZXN0PC9oMT4KPHA+WW91ciBicm93c2VyIHNlbnQgYSByZXF1ZXN0IHRoYXQgdGhpcyBzZXJ2ZXIgY291bGQgbm90IHVuZGVyc3RhbmQuPGJyIC8+CjwvcD4KPGhyPgo8YWRkcmVzcz5BcGFjaGUvMi40LjU3IChEZWJpYW4pIFNlcnZlciBhdCAxNzIuMjIuMC4zIFBvcnQgODA8L2FkZHJlc3M+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4414519167197922304</serialNumber>
    <type>134217728</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/unvalidated_redir_fwd_2.php]]></path>
    <location><![CDATA[/unvalidated_redir_fwd_2.php]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <issueDetail><![CDATA[The value of the <b>ReturnUrl</b> request parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC91bnZhbGlkYXRlZF9yZWRpcl9md2RfMi5waHA/UmV0dXJuVXJsPWZ1eno1ZWVwOHpnenpxIEhUVFAvMS4wDQpIb3N0OiB3ZWINCkNvb2tpZTogc2VjdXJpdHlfbGV2ZWw9MA0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQpEYXRlOiBUaHUsIDIxIE1hciAyMDI0IDExOjUzOjQ5IEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjU3IChEZWJpYW4pDQpYLVBvd2VyZWQtQnk6IFBIUC84LjIuMTANClNldC1Db29raWU6IFBIUFNFU1NJRD1nbmE4NmFyZzBoOGhnbjNxdm1qODBwc2czMTsgcGF0aD0vDQpFeHBpcmVzOiBUaHUsIDE5IE5vdiAxOTgxIDA4OjUyOjAwIEdNVA0KQ2FjaGUtQ29udHJvbDogbm8tc3RvcmUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUNClByYWdtYTogbm8tY2FjaGUNClNldC1Db29raWU6IFBIUFNFU1NJRD04anQ1NGtydGhsbmFrN3FvNDVrbmlwaDc0cDsgcGF0aD0vDQpMb2NhdGlvbjogZnV6ejVlZXA4emd6enENCkNvbnRlbnQtTGVuZ3RoOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgNCg0KCg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1203960467734313984</serialNumber>
    <type>134217728</type>
    <name><![CDATA[Open redirection (reflected)]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/unvalidated_redir_fwd_2.php]]></path>
    <location><![CDATA[/unvalidated_redir_fwd_2.php]]></location>
    <severity>Low</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:</p>
<ul>
  <li>Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.</li>
  <li>Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</li>
</ul>
<p>If it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:</p>
<ul>
  <li>The application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.</li>
  <li>The application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend http://yourdomainname.com to the URL before issuing the redirect.</li>
  <li>The application should use absolute URLs for all of its redirects, and the redirection function should verify that the user-supplied URL begins with http://yourdomainname.com/ before issuing the redirect.</li>
</ul>]]></remediationBackground>
    <issueDetail><![CDATA[The value of the <b>ReturnUrl</b> request parameter is used to perform an HTTP redirect. The payload <b>http://a8tkcgjhh2g/a?fuzz</b> was submitted in the ReturnUrl parameter. This caused a redirection to the following URL:<ul><li>http://a8tkcgjhh2g/a?fuzz</li></ul>]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC91bnZhbGlkYXRlZF9yZWRpcl9md2RfMi5waHA/UmV0dXJuVXJsPWh0dHAlM2ElMmYlMmZhOHRrY2dqaGgyZyUyZmElM2ZmdXp6IEhUVFAvMS4wDQpIb3N0OiB3ZWINCkNvb2tpZTogc2VjdXJpdHlfbGV2ZWw9MA0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQpEYXRlOiBUaHUsIDIxIE1hciAyMDI0IDExOjUzOjUwIEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjU3IChEZWJpYW4pDQpYLVBvd2VyZWQtQnk6IFBIUC84LjIuMTANClNldC1Db29raWU6IFBIUFNFU1NJRD04dW1vMGl0NGVwamU0am9xNDQwczcxZnAwaTsgcGF0aD0vDQpFeHBpcmVzOiBUaHUsIDE5IE5vdiAxOTgxIDA4OjUyOjAwIEdNVA0KQ2FjaGUtQ29udHJvbDogbm8tc3RvcmUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUNClByYWdtYTogbm8tY2FjaGUNClNldC1Db29raWU6IFBIUFNFU1NJRD1kN3JxZmRmYWhuaTVsZGludW91ZjFvM3BrbTsgcGF0aD0vDQpMb2NhdGlvbjogaHR0cDovL2E4dGtjZ2poaDJnL2E/ZnV6eg0KQ29udGVudC1MZW5ndGg6IDENCkNvbm5lY3Rpb246IGNsb3NlDQpDb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD1VVEYtOA0KDQoK]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5141358135839637504</serialNumber>
    <type>134217728</type>
    <name><![CDATA[XPath injection]]></name>
    <host ip="172.22.0.3">http://web</host>
    <path><![CDATA[/unvalidated_redir_fwd_2.php]]></path>
    <location><![CDATA[/unvalidated_redir_fwd_2.php]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>XPath injection vulnerabilities arise when user-controllable data is incorporated into XPath queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>Depending on the purpose for which the vulnerable query is being used, an attacker may be able to exploit an XPath injection flaw to read sensitive application data or interfere with application logic. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>User input should be strictly validated before being 
  incorporated into XPath queries. 
  In most cases, it will be appropriate to accept input containing only short 
  alphanumeric strings. At the very least, input containing any XPath metacharacters 
  such as " ' / @ = * [ ] ( and ) should be rejected.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The name of an arbitrarily supplied URL parameter appears to be vulnerable to XPath injection attacks. The payload <b>'</b> was submitted in the name of an arbitrarily supplied URL parameter, and an XPath error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC91bnZhbGlkYXRlZF9yZWRpcl9md2RfMi5waHAvMSc/UmV0dXJuVXJsPWZ1enogSFRUUC8xLjANCkhvc3Q6IHdlYg0KQ29va2llOiBzZWN1cml0eV9sZXZlbD0wDQoNCg==]]></request>
      <response base64="true"><![CDATA[]]></response>
      <responseRedirected>true</responseRedirected>
    </requestresponse>
  </issue>
</issues>
